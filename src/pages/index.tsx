/* eslint-disable react-hooks/exhaustive-deps */
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { FiCheck, FiCheckCircle, FiPlus, FiTrash2 } from 'react-icons/fi'

import { addTodo, getTodos, removeTodo, updateTodo } from '@/store/actions/todos'
import { ITodo } from '@/interfaces/todo'

export default function Home() {
  const dispatch = useDispatch()
  const { todos } = useSelector((state: any) => state.todos)

  // ----- handle get todo -----

  const onGetTodo = () => {
    dispatch(getTodos())
  }

  useEffect(() => {
    onGetTodo()
  }, [])

  // ----- handle add todo -----

  const onAddTodo = (todo: string) => {
    const newTodoData = {
      todo,
      completed: false,
      userId: 1
    }

    if (newTodo) {
      dispatch(addTodo(JSON.stringify(newTodoData)))
      setNewTodo('')
    }
  }

  const [newTodo, setNewTodo] = useState('')
  const handleOnChangeNewTodo = (event: any) => {
    setNewTodo(event.target.value)
  }

  const handleKeyDownNewTodo = (event: any) => {
    if (event.key === 'Enter') {
      onAddTodo(event.target.value)
    }
  }

  // ----- handle update todo -----

  const handleCompleteTodo = (id: number) => {
    const data = {
      completed: true
    }
    dispatch(updateTodo(id, data))
  }

  // ----- handle remove todo -----

  const handleRemoveTodo = (id: number) => {
    dispatch(removeTodo(id))
  }

  return (
    <>
      <Head>
        <title>Todo App - by Derrint</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-between p-24 antialiased bg-slate-200 text-slate-700 mx-2">
        <div className="max-w-lg mx-auto my-10 bg-white p-8 rounded-xl shadow shadow-slate-300">
          <div className="flex flex-row justify-between items-center">
            <div>
              <h1 className="text-3xl font-medium">Todo list</h1>
            </div>
            <div className="inline-flex space-x-2 items-center">
              <a
                href="#"
                className="p-2 border border-slate-200 rounded-md inline-flex space-x-1 items-center text-indigo-200 hover:text-white bg-indigo-600 hover:bg-indigo-500"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="w-4 h-4"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span className="text-sm font-medium hidden md:block">Reset</span>
              </a>
            </div>
          </div>
          <p className="text-slate-500">Hello, here are your latest tasks</p>

          <div id="tasks" className="my-5">
            <div
              id="task"
              className="flex justify-between items-center border-b border-slate-200 py-3 px-2 border-l-4  border-l-transparent gap-5"
            >
              <div className="inline-flex items-center space-x-2 align-middle flex-grow">
                <input
                  type="text"
                  value={newTodo}
                  onChange={handleOnChangeNewTodo}
                  onKeyDown={handleKeyDownNewTodo}
                  className="outline-none w-full border-slate-200"
                  placeholder="Add item here..."
                />
              </div>
              <button
                className="w-6 h-6 text-slate-500 hover:text-indigo-600"
                onClick={() => {
                  onAddTodo(newTodo)
                }}
              >
                <FiPlus size={20} />
              </button>
            </div>

            {todos.map(({ id, completed, todo }: ITodo) => {
              return (
                <div
                  key={id}
                  id="task"
                  className="flex justify-between items-center border-b border-slate-200 py-3 px-2 border-l-4  border-l-transparent gap-5"
                >
                  <div className="inline-flex items-center space-x-2 align-middle">
                    {completed ? (
                      <div className="w-6 h-6 text-slate-500">
                        <FiCheck size={20} />
                      </div>
                    ) : (
                      <button
                        className="w-6 h-6 text-slate-500 hover:text-indigo-600 hover:cursor-pointer"
                        onClick={() => {
                          handleCompleteTodo(id)
                        }}
                      >
                        <FiCheckCircle size={20} />
                      </button>
                    )}

                    <div className={completed ? 'text-slate-500 line-through' : ''}>{todo}</div>
                  </div>
                  <button
                    className="w-6 h-6 text-slate-500 hover:text-red-600"
                    onClick={() => {
                      handleRemoveTodo(id)
                    }}
                  >
                    <FiTrash2 size={20} />
                  </button>
                </div>
              )
            })}
          </div>
          <p className="text-xs text-slate-500 text-center">Last updated 12 minutes ago</p>
        </div>
      </main>
    </>
  )
}
