/* eslint-disable react-hooks/exhaustive-deps */
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { FiPlus, FiTrash2, FiSquare, FiCheckSquare, FiSave } from 'react-icons/fi'
import { useDispatch, useSelector } from 'react-redux'
import { toast } from 'react-toastify'
import Cookies from 'js-cookie'

import { addTodo, getTodos, deleteTodo, updateTodo } from '@/store/actions/todo'
import { ITodo, ITodoPayload } from '@/interfaces/todo'
import { logout } from '@/store/actions/auth'
import { useGetTodosQuery } from '@/api/todo'

export const pageTitleTestid = 'page-title'
export const pageSubtitleTestid = 'page-subtitle'
export const todoItemWrapperTestid = 'todo-item-wrapper'
export const todoItemTestid = 'todo-item'
export const todoInputTestid = 'todo-input'
export const todoButtonAddTestid = 'todo-button-add'
export const todoButtonUpdateTestid = 'todo-button-update'
export const todoButtonRemoveTestid = 'todo-button-remove'
export const resetButtonTestid = 'reset-button'
export const logoutButtonTestid = 'logout-button'

const Home = () => {
  const router = useRouter()
  const dispatch = useDispatch()

  const [newTodo, setNewTodo] = useState('')
  const [openedTodo, setOpenedTodo] = useState('')
  const [tempData, setTempData] = useState<ITodoPayload>({
    name: '',
    done: false,
    details: ''
  })

  // ----- handle get todo -----

  const { data: todos, isLoading, isSuccess, isError, error } = useGetTodosQuery('')

  console.log({ todos, isLoading, isSuccess, isError, error })

  // ----- handle add todo -----

  const onAddTodo = (todo: string) => {
    const newTodoData: ITodoPayload = {
      name: todo,
      done: false,
      details: ''
    }

    if (newTodo) {
      dispatch(addTodo(newTodoData)).catch((error: any) => {
        toast.error(error.message)
      })
      setNewTodo('')
    }
  }

  const handleOnChangeNewTodo = (event: any) => {
    setNewTodo(event.target.value)
  }

  const handleKeyDownNewTodo = (event: any) => {
    if (event.key === 'Enter') {
      onAddTodo(event.target.value)
    }
  }

  // ----- handle update todo -----

  const handleUpdateTodo = (id: string, data: ITodoPayload) => {
    dispatch(updateTodo(id, data)).catch((error: any) => {
      toast.error(error.message)
    })
  }

  const handleToggleCheckbox = (item: ITodo) => {
    const newData = {
      ...item,
      done: !item.done
    }
    handleUpdateTodo(item.id, newData)
  }

  const handleOpenTodo = (item: ITodo) => {
    setOpenedTodo(item.id)

    const data = {
      name: item.name,
      details: item.details,
      done: item.done
    }
    setTempData(data)
  }

  const handleUpdateTodoName = (event: any) => {
    const data = {
      ...tempData,
      name: event.target.value
    }
    setTempData(data)
  }

  const handleUpdateTodoDetails = (event: any) => {
    const data = {
      ...tempData,
      details: event.target.value
    }
    setTempData(data)
  }

  const handleSaveTodo = (id: string, data: ITodoPayload) => {
    handleUpdateTodo(id, data)

    // reset temp data
    setOpenedTodo('')
    setTempData({
      name: '',
      done: false,
      details: ''
    })
  }

  // ----- handle delete todo -----

  const handleDeleteTodo = (id: string) => {
    dispatch(deleteTodo(id)).catch((error: any) => {
      toast.error(error.message)
    })
  }

  // ----- handle logout -----

  const onLogout = () => {
    dispatch(logout()).catch((error: any) => {
      toast.error(error.message)
    })
    toast.success(`See you..`)
    router.replace('/login')
  }

  return (
    <>
      <Head>
        <title>Todo App - by Derrint</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-between p-24 antialiased bg-slate-200 text-slate-700 mx-2">
        <div className="max-w-lg mx-auto my-10 bg-white p-8 rounded-xl shadow shadow-slate-300">
          <div className="flex flex-row justify-between items-center">
            <div>
              <h1 className="text-3xl font-medium" data-testid={pageTitleTestid}>
                Todo List
              </h1>
            </div>
          </div>
          <p className="text-slate-500" data-testid={pageSubtitleTestid}>
            Hello, here are your latest tasks.
          </p>

          <div id="tasks" className="my-8" data-testid={todoItemWrapperTestid}>
            {todos &&
              todos.map((item: ITodo) => {
                const isOpen = openedTodo === item.id
                return (
                  <div
                    className={`
                      flex justify-between border-b border-slate-200 py-3 px-3 gap-2 bg-gradient-to-r from-transparent to-transparent hover:from-slate-100 transition-all duration-150
                      ${isOpen ? 'bg-slate-100 border-x-0 border-t-0' : 'cursor-pointer'}
                    `}
                    key={item.id}
                  >
                    <div className="flex-none leading-none">
                      <button
                        className={`w-6 h-6 hover:text-indigo-600 hover:cursor-pointer text-slate-700`}
                        onClick={() => handleToggleCheckbox(item)}
                        data-testid={todoButtonUpdateTestid}
                      >
                        {item.done ? <FiCheckSquare size={20} /> : <FiSquare size={20} />}
                      </button>
                    </div>
                    <div className="flex-grow max-w-full">
                      <div className="w-full leading-none mt-0.5">
                        <div
                          onClick={() => handleOpenTodo(item)}
                          className={`leading-none truncate w-full
                            ${item.done ? 'text-slate-400 line-through' : ''}
                            ${!isOpen ? 'visible' : 'hidden'}
                          `}
                        >
                          {item.name}
                        </div>
                        <input
                          type="text"
                          className={`w-full bg-transparent text-slate-700 leading-none focus:outline-none mb-2
                            ${isOpen ? 'visible' : 'hidden'}
                          `}
                          value={isOpen ? tempData.name : item.name}
                          onChange={handleUpdateTodoName}
                          id={item.id}
                          placeholder="Todo name..."
                        />
                      </div>
                      <div className={`w-full transition-all ${isOpen ? 'h-16' : 'h-0'}`}>
                        <textarea
                          className={`w-full bg-transparent text-slate-700 leading-tight focus:outline-none
                            ${isOpen ? 'visible' : 'hidden'}
                          `}
                          rows={5}
                          value={isOpen ? tempData.details : item.details}
                          onChange={handleUpdateTodoDetails}
                          placeholder="Details..."
                        ></textarea>
                      </div>
                      <div className={`w-full flex gap-1 justify-end ${isOpen ? 'visible' : 'hidden'}`}>
                        <button
                          className="w-6 h-6 text-slate-700 hover:text-red-600"
                          onClick={() => handleDeleteTodo(item.id)}
                          data-testid={todoButtonRemoveTestid}
                        >
                          <FiTrash2 size={20} />
                        </button>
                        <button
                          className="w-6 h-6 text-slate-700 hover:text-indigo-600"
                          onClick={() => handleSaveTodo(item.id, tempData)}
                          data-testid={todoButtonUpdateTestid}
                        >
                          <FiSave size={20} />
                        </button>
                      </div>
                    </div>
                  </div>
                )
              })}

            <div
              id="task"
              className="flex justify-between items-center border-b border-slate-200 py-3 px-2 border-l-4  border-l-transparent gap-5"
            >
              <div className="inline-flex items-center space-x-2 align-middle flex-grow">
                <input
                  type="text"
                  value={newTodo}
                  onChange={handleOnChangeNewTodo}
                  onKeyDown={handleKeyDownNewTodo}
                  className="outline-none w-full border-slate-200"
                  placeholder="Add new item here..."
                  data-testid={todoInputTestid}
                />
              </div>
              <button
                className="w-6 h-6 text-slate-500 hover:text-indigo-600"
                onClick={() => {
                  onAddTodo(newTodo)
                }}
                data-testid={todoButtonAddTestid}
              >
                <FiPlus size={20} />
              </button>
            </div>
          </div>
          <p className="text-xs text-slate-500 text-center">
            Already done with your things?{' '}
            <button onClick={onLogout} className="text-indigo-600" data-testid={logoutButtonTestid}>
              Log out
            </button>
          </p>
        </div>
      </main>
    </>
  )
}
export default Home
